use anyhow::{bail, Result};
use bevy::{
    asset::{AssetLoader, LoadContext, LoadedAsset},
    render::texture::{Extent3d, Texture, TextureDimension, TextureFormat},
    reflect::TypeUuid,    
    utils::BoxedFuture,
};

use std::collections::HashSet;

#[derive(Debug, TypeUuid)]
#[uuid = "cc0c8d4b-e8cb-49f9-8baf-7974a84c4172"]
pub struct ColorPalette {
    pub palette: [(u8, u8, u8, u8); 256], // 32bit RGB colors
    pub conversion_table: [u8; 0x8000], // 15bit RGB to palette index
}

#[derive(Default)]
pub struct ColorPaletteAssetLoader;

const rmp0: &[u8] = &[
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x9a,
0x9a,
0x3c,
0x48,
0x62,
0x8e,
0xb2,
0x62,
0xe5,
0x48,
0x48,
0xe5,
0x0e,
0x48,
0x48,
0xe5,
0xe5,
0xb8,
0xb1,
0x48,
0x62,
0xb2,
0xe5,
0x7b,
0x62,
0x0e,
0xb2,
0x0e,
0xb8,
0x8e,
0x7b,
0xcd,
0x48,
0xe5,
0x48,
0xb8,
0x7b,
0x62,
0xb8,
0x0e,
0x48,
0xc2,
0x8e,
0xd0,
0xd7,
0xe5,
0x7b,
0x3c,
0xcd,
0xc2,
0x8e,
0xb8,
0x7b,
0x0e,
0x62,
0x48,
0x7b,
0xcd,
0x9a,
0x48,
0x48,
0xb2,
0x48,
0x0e,
0x48,
0xb2,
0xb8,
0x48,
0x48,
0x0e,
0x00,
0x00,
0x7b,
0xe5,
0x0e,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x64,
0x64,
0x64,
];

const rmp1: &[u8] = &[
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0xb2,
0x7b,
0xcd,
0xbf,
0xb8,
0xc2,
0xcd,
0xb2,
0xcd,
0xb2,
0x62,
0xc4,
0x8e,
0xc2,
0xc2,
0xc2,
0xc2,
0xb1,
0x00,
0xd0,
0x7b,
0x7b,
0x0e,
0x7b,
0xb1,
0xb1,
0xb1,
0xb8,
0xb1,
0xaa,
0xaa,
0xaa,
0xb8,
0xc4,
0xd7,
0x7b,
0xc2,
0xb8,
0xd7,
0xd7,
0xb2,
0xaa,
0x8e,
0xb1,
0xb1,
0xcd,
0xc2,
0x8e,
0xc2,
0xaa,
0xb1,
0x8e,
0x8e,
0x8e,
0x9a,
0xc4,
0xc4,
0xc2,
0xb2,
0x7b,
0xb2,
0xb8,
0xb8,
0xcd,
0x62,
0xb8,
0xd0,
0x0e,
0x3c,
0x7b,
0x00,
0x00,
0x8e,
0x87,
0xc4,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x0f,
0x0f,
0xa0,
];

const rmp2: &[u8] = &[
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0xea,
0x01,
0xdc,
0xf0,
0xf0,
0xcb,
0x01,
0xea,
0xfe,
0xee,
0xed,
0xfe,
0xeb,
0xf2,
0xf2,
0xf3,
0xf3,
0xfa,
0xaa,
0xfe,
0xf0,
0xe8,
0xe4,
0x7b,
0xf5,
0xf7,
0xf8,
0x07,
0xfa,
0xfd,
0xfb,
0xfc,
0xf0,
0xfe,
0xf1,
0xe8,
0xdd,
0xf0,
0xf9,
0xeb,
0xee,
0xd9,
0xcc,
0xcb,
0xd9,
0xfe,
0x02,
0xd5,
0x02,
0xd9,
0xfd,
0xeb,
0xd0,
0xeb,
0x9a,
0xfe,
0xc4,
0xcb,
0xea,
0xfe,
0xee,
0xe2,
0xf0,
0x01,
0xe9,
0xa5,
0xdc,
0xee,
0xf0,
0x01,
0x00,
0x00,
0xd5,
0xf0,
0x01,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x64,
0x00,
0x0a, 
];

const rmp4: &[u8] = &[
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x9e,
0x78,
0x9c,
0x84,
0x89,
0x69,
0x70,
0x6b,
0x77,
0x8c,
0x6e,
0x85,
0x70,
0x71,
0x72,
0x73,
0x74,
0x75,
0x76,
0x77,
0x78,
0x79,
0x7a,
0x7b,
0x7c,
0x7d,
0x7e,
0x7f,
0x75,
0x81,
0x82,
0x83,
0x84,
0x85,
0x77,
0x87,
0x88,
0x78,
0x8a,
0x70,
0x8c,
0x8d,
0x8e,
0x8f,
0x90,
0x77,
0x88,
0x88,
0x8f,
0x8d,
0x90,
0x70,
0x98,
0x70,
0x9a,
0x85,
0x9c,
0x8f,
0x9e,
0x85,
0x8c,
0x7f,
0x84,
0x70,
0x6e,
0xa5,
0x98,
0x7a,
0x84,
0x78,
0x00,
0x00,
0x98,
0x78,
0x79,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x64,
0x00,

];

impl AssetLoader for ColorPaletteAssetLoader {
    fn load<'a>(
        &'a self,
        bytes: &'a [u8],
        load_context: &'a mut LoadContext,
    ) -> BoxedFuture<'a, Result<()>> {
        Box::pin(async move {
            let color_palette = parse(bytes)?;
            
            // 40x30 patches (16x16)
            let width = 640;
            let height = 480;
            let mut image_data = vec![0; 4 * width * height];

            let mut r: HashSet<u8> = rmp1.iter().cloned().collect();
            println!("{} {:?}", r.len(), r);


            for i in 0..width * height {
                let x = (i % width) / 40;
                let y = (i / width) / 30;
                let j = x * y;
                let rmp = &rmp4;

                // let k = j % 86;
                // let l = k * 3;
                // let c = (rmp[l], rmp[l+1], rmp[l+2], 255);

                // let k = j % 128;
                // let l = 1 + k * 2;
                // let m = (rmp[l] as u16) << 8 | rmp[l+1] as u16;
                // let n = color_palette.conversion_table[(m & 0x7fffu16) as usize];
                // let c = color_palette.palette[n as usize];
                
                // let c = if rmp.iter().any(|&x| x == j as u8) {
                //     color_palette.palette[j]
                // } else {
                //     (0, 0, 0, 0)
                // };

                let c = color_palette.palette[j];

                image_data[i * 4] = c.0;
                image_data[i * 4 + 1] = c.1;
                image_data[i * 4 + 2] = c.2;
                image_data[i * 4 + 3] = c.3;
            };

            let texture = Texture::new(
                Extent3d::new(width as u32, height as u32, 1),
                TextureDimension::D2,
                image_data,
                TextureFormat::Rgba8UnormSrgb,
            );

            load_context.set_default_asset(LoadedAsset::new(texture));
            Ok(())
        })
    }

    fn extensions(&self) -> &[&str] {
        &["pal", "PAL"]
    }
}

fn parse(bytes: &[u8]) -> Result<ColorPalette> {
    if bytes.len() != 0x8300 {
        bail!("Palette file has wrong size");
    }

    let mut color_palette = ColorPalette {
        palette: [(0, 0, 0, 255); 256],
        conversion_table: [0; 0x8000],
    };

    let mut i = 0;
    for j in 0..256 {
        let r = bytes[i] << 2;
        let g = bytes[i + 1] << 2;
        let b = bytes[i + 2] << 2;
        color_palette.palette[j] = (r, g, b, 255);
        i += 3;
    }

    for j in 0..0x8000 {
        color_palette.conversion_table[j] = bytes[i];
        i += 1;
    }

    Ok(color_palette)
}
